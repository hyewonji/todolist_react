{"version":3,"sources":["components/TodoListTemplate.js","TodoContext.js","components/TodoHead.js","components/TodoItem.js","components/TodoItemList.js","components/TodoListCreate.js","App.js","reportWebVitals.js","index.js"],"names":["TodoListTemplateBlock","styled","div","TodoListTemplate","form","children","palette","initialTodos","id","text","done","color","todoReducer","state","action","type","concat","todo","map","filter","Error","TodoStateContext","createContext","TodoDispatchContext","TodoNextIdContext","TodoProvider","useReducer","dispatch","nextId","useRef","Provider","value","useTodoState","context","useContext","useTodoDispatch","TodoHeadBlock","TodoHead","undoneTasks","today","Date","dateString","toLocaleDateString","year","month","day","dayName","weekday","className","length","Remove","TodoItemBlock","CheckCircle","props","css","Text","TodoItem","onClick","TodoListBlock","TodoItemList","todos","CircleButton","button","open","InsertFormPositioner","InsertForm","Input","input","PaletteForm","PaletteColor","TodoListCreate","useState","setOpen","setValue","nowColor","setNowColor","useTodoNextId","onColor","e","target","Palette","onSubmit","preventDefault","current","autoFocus","placeholder","onChange","React","memo","GlobalStyle","createGlobalStyle","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4097e8e1.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst TodoListTemplateBlock = styled.div`\n  width: 512px;\n  height: 768px;\n\n  position: relative; /* 추후 박스 하단에 추가 버튼을 위치시키기 위한 설정 */\n  background: white;\n  border-radius: 16px;\n  box-shadow: 0 0 8px 0 rgba(0, 0, 0, 0.04);\n\n  margin: 0 auto; /* 페이지 중앙에 나타나도록 설정 */\n\n  margin-top: 96px;\n  margin-bottom: 32px;\n  display: flex;\n  flex-direction: column;\n`;\n\n\nconst TodoListTemplate = ({ form, children, palette }) => {\n    return (\n        <TodoListTemplateBlock>\n            {children}\n        </TodoListTemplateBlock>\n    );\n};\n\nexport default TodoListTemplate;","import React, { createContext, useContext, useReducer, useRef } from 'react';\n\nconst initialTodos = [\n    {\n        id: 1,\n        text: '프로젝트 생성하기',\n        done: true,\n        color: \"#4c4c4c\"\n    },\n    {\n        id: 2,\n        text: '컴포넌트 스타일링하기',\n        done: true,\n        color: \"#4c4c4c\"\n    },\n    {\n        id: 3,\n        text: 'Context 만들기',\n        done: false,\n        color: \"#4c4c4c\"\n    },\n    {\n        id: 4,\n        text: '기능 구현하기',\n        done: false,\n        color: \"#4c4c4c\"\n    },\n]\n\nfunction todoReducer(state, action){\n    switch (action.type){\n        case 'CREATE':\n            return state.concat(action.todo);\n        case 'TOGGLE':\n            return state.map(todo =>\n                todo.id === action.id ? {...todo, done: !todo.done } : todo\n            );\n        case 'REMOVE':\n            return state.filter(todo => todo.id !== action.id);\n        default:\n            throw new Error(`Unhandled action type: ${action.type}`);\n    }\n}\n\n\n/*  state와 dispatch를 Context를 통해 다른 컴포넌트에서 바로 사용할 수 있게 해준다.\n    두개의 Context를 만들어(`React.createContext(null)`) 각각 넣어준다.\n    dispatch만 필요한 컴포넌트에서 불필요한 렌더링을 방지할 수 있다.  */\nconst TodoStateContext = createContext();\nconst TodoDispatchContext = createContext();\nconst TodoNextIdContext = createContext();\n\n\n/*  Context를 만들면, Context안에 Provider이라는 컴포넌트를 통해 Context의 값을 정할 수 있다.\n    Context에서 사용할 값을 지정할 때는 Provider 컴포넌트를 렌더링 하고 value를 설정해준다.\n    이렇게 설정하면 Provider에 의해 감싸진 컴포넌트 중 어디서든지 Contaxt의 값을 다른 곳에서 바로 조회해서 사용 할 수 있다.  */\n/*  useState 대신 useReducer사용하는 이유 : \n    dispatch를 Context API를 사용해 전역적으로 사용 할 수 있게 해주면, 컴포넌트에게 함수를 전달해야 하는 상황에서 코드의 구조가 훨씬 깔끔해질 수 있다.\n    따라서, 컴포넌트에게 여러 컴포넌트를 거쳐 함수를 전달해야 하는 일이 있다면 Context API를 사용한다.  */\nexport function TodoProvider({ children }){\n    const [state, dispatch] = useReducer(todoReducer, initialTodos);\n    const nextId = useRef(5);\n\n    return (\n    <TodoStateContext.Provider value={state}>\n        <TodoDispatchContext.Provider value={dispatch}>\n            <TodoNextIdContext.Provider value={nextId}>\n                {children}\n            </TodoNextIdContext.Provider>\n        </TodoDispatchContext.Provider>\n    </TodoStateContext.Provider>\n    );\n}\n\n\n//  useContext를 컴포넌트에서 직접 사용하는 대신에, useContext를 사용하는 커스텀 Hook을 만들어 내보내준다.\nexport function useTodoState(){\n    const context = useContext(TodoStateContext);\n    if (!context) {\n        throw new Error('Cannot find TodoProvider');\n    }\n    return context;\n}\n\nexport function useTodoDispatch(){\n    const context = useContext(TodoDispatchContext);\n    if(!context){\n        throw new Error('Cannot find TodoProvider');\n    }\n    return context;\n}\n\nexport function useTodoNextId(){\n    const context = useContext(TodoNextIdContext);\n    if (!context) {\n        throw new Error('Cannot find TodoProvider');\n    }\n    return context;\n}\n/*  inpu같은 관리할 때마다 꽤 비슷한 코드가 반복되는 상황에서는, `커스텀 Hooks`를 만들어 반복되는 로직을 쉽게 재사용한다.\n    Hooks : useState, useEffect, useReducer, useCallback 등  */\n/*  커스텀 Hooks를 사용하려면 해당 컴포넌트가 TodoProvider 컴포넌트 내부에 렌더링 되어있어야 한다.  */\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useTodoState } from '../TodoContext';\n\nconst TodoHeadBlock = styled.div`\n    padding: 48px 32px 32px 24px;\n    border-bottom: 1px solid #e9ecef;\n    h1{\n        margin: 0;\n        font-size: 36px;\n        color: #343a40;\n    }\n    .day{\n        margin-top: 4px;\n        color: #868e96;\n        font-size: 21px;\n    }\n    .tasks-left {\n        color: #20c997;\n        font-size: 18px;\n        margin-top: 40px;\n        font-weight: bold;\n    }\n`;\n\nfunction TodoHead() {\n    const todos = useTodoState();\n    const undoneTasks = todos.filter(todo => !todo.done);\n\n    const today = new Date();\n    const dateString = today.toLocaleDateString('ko-KR', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n    });\n    const dayName = today.toLocaleDateString('ko-KR', { weekday: 'long' });\n\n    return (\n        <TodoHeadBlock>\n            <h1>{ dateString }</h1>\n            <div className=\"day\">{ dayName }</div>\n            <div className=\"tasks-left\">할 일 {undoneTasks.length}개 남음</div>\n        </TodoHeadBlock>\n    );\n}\n\nexport default TodoHead;","import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { MdDone, MdDelete } from 'react-icons/md';\nimport { useTodoDispatch } from '../TodoContext';\n//https://react-icons.github.io/react-icons -> react-icons\n\nconst Remove = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: #dee2e6;\n    font-size: 24px;\n    cursor: pointer;\n    &:hover {\n      color: #ff6b6b;\n    }\n    display: none;\n`;\n\nconst TodoItemBlock = styled.div`\n    display: flex;\n    align-items: center;\n    padding-top: 12px;\n    padding-bottom: 12px;\n    &:hover{\n        ${Remove} {\n            display: initial;\n        }\n    }\n`;\n\nconst CheckCircle = styled.div`\n    width: 32px;\n    height: 32px;\n    border-radius:16px;\n    border: 1px solid #ced4da;\n    font-size: 24px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin-right: 20px;\n    cursor: pointer;\n    ${props =>\n        props.done &&\n        css`\n            border: 1px solid #38d9a9;\n            color: #38d9a9;\n        `}\n`;\n\nconst Text = styled.div`\n    flex: 1;\n    font-size: 21px;\n    color: ${props => props.color};\n    opacity: ${props => props.done ? 0.4 : 1};\n`\n\nfunction TodoItem({ id, done, text, color}){\n    const dispatch = useTodoDispatch();\n    const onToggle = () => dispatch({ type: 'TOGGLE', id });\n    const onRemove = () => dispatch({ type: 'REMOVE', id });\n\n    return (\n        <TodoItemBlock>\n            <CheckCircle done={done} onClick={onToggle}>{done && <MdDone />}</CheckCircle>\n            <Text done={done} color={color}>{text}</Text>\n            <Remove onClick={onRemove}>\n                <MdDelete />\n            </Remove>\n        </TodoItemBlock>\n    );\n\n}\n\nexport default TodoItem;\n","import React from 'react';\nimport styled from 'styled-components';\nimport TodoItem from './TodoItem';\nimport { useTodoState } from '../TodoContext';\n\nconst TodoListBlock = styled.div`\n    flex: 1;\n    padding: 20px 32px;\n    padding-bottom: 48px;\n    overflow-y: auto;\n    //background: gray; /* 사이즈 조정이 잘 되고 있는지 확인하기 위한 임시 스타일 */\n`;\n\nfunction TodoItemList() {\n    const todos = useTodoState();\n\n    return (\n        <TodoListBlock>\n            {todos.map(todo => (\n                <TodoItem\n                    key={todo.id}\n                    id={todo.id}\n                    text={todo.text}\n                    done={todo.done}\n                    color={todo.color}\n                />\n            ))}\n        </TodoListBlock>\n    )\n}\n\n\nexport default TodoItemList;","import React, { useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { MdAdd } from 'react-icons/md';\nimport { useTodoDispatch, useTodoNextId } from '../TodoContext';\n\nconst CircleButton = styled.button`\n    background: #38d9a9;\n    &:hover{\n        background: #63e6be;\n    }\n    &:active{\n        background:#20c997;\n    }\n\n    z-index: 5;\n    cursor: pointer;\n    width: 80px;\n    height: 80px;\n    font-size: 60px;\n    position: absolute;\n    left: 50%;\n    bottom: 0px;\n    transform: translate(-50%, 50%);\n    color: white;\n    border-radius: 50%;\n    border: none;\n    outline: none;\n    display: flex;\n    align-items: center;\n    justify-content:center;\n\n    transition: 0.125s all ease-in;\n    ${props =>\n        props.open &&\n        css`\n        background: #ff6b6b;\n        &:hover {\n        background: #ff8787;\n        }\n        &:active {\n            background: #fa5252;\n        }\n        transform: translate(-50%, 50%) rotate(45deg);\n        `}\n`;\n\nconst InsertFormPositioner = styled.div`\n    width: 100%;\n    bottom: 0;\n    left: 0;\n    position: absolute;\n`;\n\nconst InsertForm = styled.form`\n    background: #F7F8F9;\n    padding: 0px 32px 72px 32px;\n    border-radius: 0 0 16px 16px;\n    border-top: 1px solid #e9ecef;\n`\n\nconst Input = styled.input`\n    padding: 12px;\n    border-radius: 4px;\n    border: 1px solid #dee2e6;\n    width: 100%;\n    outline: none;\n    font-size: 18px;\n    box-sizing: border-box;\n    color: ${props => props.color};\n    ::-webkit-input-placeholder{\n        color: ${props => props.color};\n        opacity: 0.6\n    }\n`\n\nconst PaletteForm = styled.div`\n    width:100%;\n    padding: 5px 0;\n    display: flex;\n    justify-content: center;\n`\n\nconst PaletteColor = styled.div`\n    width: 30px;\n    height: 30px;\n    margin: 10px;\n    background: ${props => props.id};\n    cursor:pointer;\n`\n\nfunction TodoListCreate() {\n    const [open, setOpen] = useState(false);\n    const [value, setValue] = useState('');\n    const [nowColor, setNowColor] = useState(\"black\")\n\n    const dispatch = useTodoDispatch();\n    const nextId = useTodoNextId();\n\n    const onToggle = () => setOpen(!open);\n    const onChange = e => setValue(e.target.value)\n    const onColor = (e) => {\n        const color = e.target.id;\n        setNowColor(color);\n    }\n    const onSubmit = e => {\n        e.preventDefault();//새로고침 방지\n        dispatch({\n            type: 'CREATE',\n            todo: {\n                id: nextId.current,\n                text: value,\n                done: false,\n                color: nowColor\n            }\n        });\n        setValue('');\n        setOpen(false);\n        setNowColor(\"black\")\n        nextId.current += 1;\n    }\n\n    const Palette = ['#4c4c4c',' #ff9c9c','#8ad3b8',' #86bbf0']\n\n    return (\n        <>\n            {open && (\n                <InsertFormPositioner>\n                    <InsertForm onSubmit={onSubmit}>\n                        <PaletteForm>\n                            <PaletteColor onClick={onColor} id={Palette[0]} />\n                            <PaletteColor onClick={onColor} id={Palette[1]} />\n                            <PaletteColor onClick={onColor} id={Palette[2]} />\n                            <PaletteColor onClick={onColor} id={Palette[3]} />\n                        </PaletteForm>\n                        <Input \n                        autoFocus \n                        placeholder=\"할 일을 입력 후, Enter를 누르세요\"\n                        onChange={onChange}\n                        value={value}\n                        color={nowColor}\n                        />\n                    </InsertForm>\n                </InsertFormPositioner>\n            )}\n            <CircleButton onClick={onToggle} open={open}>\n                <MdAdd />\n            </CircleButton>\n        </>\n    );\n}\n\n/*  React.memo로 감싸줘서 \n    TodoContext에서 관리하고 있는 state가 바뀔 때 TodoCreate의 불필요한 리렌더링 방지  \n    TodoContext에서 Context를 각각 만들어 줬기 때문에 가능하다.  */\nexport default React.memo(TodoListCreate);\n","import React from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport TodoListTemplate from './components/TodoListTemplate';\nimport TodoHead from './components/TodoHead';\nimport TodoItemList from './components/TodoItemList';\nimport TodoListCreate from './components/TodoListCreate';\nimport { TodoProvider } from './TodoContext';\n\nconst GlobalStyle = createGlobalStyle`\nbody{\n  background: #e9ecef;\n}\n`;\n\nfunction App() {\n  return (\n    <TodoProvider>\n      <GlobalStyle />\n      <TodoListTemplate>\n        <TodoHead />\n        <TodoItemList />\n        <TodoListCreate />\n      </TodoListTemplate>\n    </TodoProvider>\n  );\n}\n\n\nexport default App;\n\n/* React Component구현 방법 :\n  컴포턴트 DOM 태그 작성, CSS스타일 작성 -> 상태관리 및 props로 필요한 값 전달 */\n/* ‘리스트’ 를 렌더링하게 될 때(특히 보여주는 리스트가 동적인 경우) :\n  함수형이 아닌 클래스형 컴포넌트로 작성한다. 클래스형 컴포넌트로 작성해야 나중에 컴포넌트 성능 최적화를 할 수 있기 때문이다. */\n/* 상태관리시 :\n  컴포넌트끼리 데이터를 직접(ref를 사용해서) 전달하는것이 아니고,\n  반드시 부모를 통하여 전달한다.*/","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}